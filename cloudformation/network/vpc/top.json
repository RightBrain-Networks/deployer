{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Nested CloudFormation Stack to Group VPC DMZ and Environment Networking.",
  "Parameters": {
    "Project": {
      "Description": "Project name.",
      "Type": "String",
      "Default": "PROJECT"
    },
    "PrivateDomain": {
      "Description": "Private domain name.",
      "Type": "String",
      "Default": ""
    },
    "PublicDomain": {
      "Description": "Public domain name.",
      "Type": "String",
      "Default": ""
    },
    "CloudToolsBucket": {
      "Description":"Name of S3 bucket containing CloudTools scripts.",
      "Type": "String",
      "Default": ""
    },
    "CommonBootstrapFile": {
      "Description": "Name of common bootstrap file to be used by many instances.",
      "Type": "String",
      "Default": "common.sh"
    },
    "BastionInstanceType": {
      "Description": "The EC2 instance type assigned to the Launch Configuration for EC2 instances in the ASG.",
      "Type": "String",
      "Default": "t2.nano",
      "ConstraintDescription": "Must be a string."
    },
    "BastionAMI": {
      "Description": "The AMI ID assigned to the Launch Configuration for EC2 instances in the ASG.",
      "Type": "AWS::EC2::Image::Id"
    },
    "EC2KeyPair": {
      "Description": "Bastion EC2 key pair to be used across instances. If using appended region, do not include.",
      "Type": "String",
      "Default": "bastion-"
    },
    "Environment": {
      "Description": "Environment name assigned to EC2 instances (e.g. 'prod' or 'test').",
      "Type": "String", 
      "Default": "ENV",
      "ConstraintDescription": "Must be a string."
    },
    "Release" : {
      "Description" : "Release Number",
      "Type" : "String",
      "Default" : "0.0.1"
    },
    "SSLCertId": {
      "Description": "SSL Cert Id",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "Must be a Id."
    },
    "VPNCIDR" : {
      "Description" : "CIDR block of the VPC.",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "10.0.0.0/8",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "Must be valid CIDR notation (i.e. x.x.x.x/x)."
    },
    "GlobalCIDR" : {
      "Description" : "CIDR block of the VPC.",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "10.0.0.0/8",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "Must be valid CIDR notation (i.e. x.x.x.x/x)."
    },
    "MaskBit":{
      "Description":"Desired mask bit length",
      "Type":"Number",
      "MinValue":"16",
      "MaxValue":"28",
      "ConstraintDescription":"must be a valid number between 16 and 28"
    },
    "ReservedCidrs":{
      "Description":"Reserved vpc cidr blocks",
      "Type":"String",
      "Default": ""
    },
    "PeeringEnvironment" : {
      "Description" : "Environment tag of vpc you want to peer with.",
      "Type" : "String",
      "Default": ""
    },
    "InternalHostedZone" : {
      "Description" : "Route53 private hosted zone",
      "Type" : "String"
    },
    "BastionSSHFrom":{
      "Description":"Lockdown SSH access to the bastion host",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "NumberOfAzsOverRide": {
      "Description": "How Many Az's to use",
      "Type": "Number",
      "Default": "3",
      "MaxValue": "4",
      "MinValue": "2"
    },
    "PeerVPCCidr":{
      "Description":"Cidr of the shared services vpc",
      "Type":"String",
      "Default":""
    },
    "PeerVPCOverRide": {
      "Description": "VPC to peer with or empty string",
      "Type": "String",
      "Default": ""
    },
    "PublicPeerRouteTable": {
      "Description": "Public Route Table",
      "Type": "String",
      "Default": ""
    },
    "PrivatePeerRouteTableAz1": {
      "Description": "Private Route Table Az1",
      "Type": "String",
      "Default": ""
    },
    "PrivatePeerRouteTableAz2": {
      "Description": "Private Route Table Az2",
      "Type": "String",
      "Default": ""
    },
    "PrivatePeerRouteTableAz3": {
      "Description": "Private Route Table Az3",
      "Type": "String",
      "Default": ""
    },
    "PrivatePeerRouteTableAz4": {
      "Description": "Private Route Table Az4",
      "Type": "String",
      "Default": ""
    },
    "VPCCIDR" : {
      "Description" : "CIDR block of the VPC.",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "Must be valid CIDR notation (i.e. x.x.x.x/x)."
    },
    "OpenRuleNumber": {
      "Description": "OpenRuleNumber to use for peering Nacl rules",
      "Type": "Number",
      "Default": "100"
    },
    "PeerPublicNacl":{
      "Description":"Public Nacl Id",
      "Type":"String",
      "Default":""
    },
    "PeerPrivateNacl":{
      "Description":"Private Nacl Id",
      "Type":"String",
      "Default":""
    },
    "PublicSubnetAz1Cidr": {
      "Description":"Cidr of the Public Subnet in Az1",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAz2Cidr": {
      "Description":"Cidr of the Public Subnet in Az2",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAz3Cidr": {
      "Description":"Cidr of the Public Subnet in Az3",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAz4Cidr": {
      "Description":"Cidr of the Public Subnet in Az4",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAz1Cidr": {
      "Description":"Cidr of the Private Subnet in Az1",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAz2Cidr": {
      "Description":"Cidr of the Private Subnet in Az2",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAz3Cidr": {
      "Description":"Cidr of the Private Subnet in Az3",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAz4Cidr": {
      "Description":"Cidr of the Private Subnet in Az4",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"10.238.43.0/24",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
  }, 
  "Conditions": {
    "LambdaAvailable": { "Fn::Not": [
      { "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-southeast-1" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-northeast-2" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "sa-east-1" ] }
      ]}
    ]},
    "NATCondition": { "Fn::Not": [
      { "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-northeast-2" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "sa-east-1" ] }
      ]}
    ]},
    "Peering": { "Fn::Not": [
      { "Fn::Or": [
        { "Fn::Equals": [ { "Ref": "PeeringEnvironment" }, "" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-west-1" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-southeast-1" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-southeast-2" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "ap-northeast-2" ] },
        { "Fn::Equals": [ { "Ref": "AWS::Region" }, "sa-east-1" ] }
      ]}
    ]},
    "IsRegionUSStandard": { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ] }
  },
  "Resources": {
    "SNS": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/sns.json" ]] },
        "Parameters": {
          "Project": { "Ref": "Project" },
          "Environment": { "Ref": "Environment" }
        }
      }
    },
    "IAM": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/iam.json" ]] },
        "Parameters": {
          "CloudToolsBucket": { "Ref": "CloudToolsBucket" }
        }
      }
    },
    "CustomLogic": {
      "Condition": "LambdaAvailable",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/custom_logic.json" ]] },
        "Parameters": {
          "Release": { "Ref": "Release" },
          "CloudToolsBucket": { "Ref": "CloudToolsBucket" },
          "LambdaRoleArn": { "Fn::GetAtt": [ "IAM", "Outputs.LambdaRoleArn" ] }
        }
      }
    },
    "NumberAzs": {
      "Condition": "LambdaAvailable",
      "Type": "Custom::NumberAzs",
      "Properties": {
        "ServiceToken": { "Fn::If": ["LambdaAvailable",{ "Fn::GetAtt": [ "CustomLogic", "Outputs.LambdaAzArn" ] }, { "Ref": "AWS::NoValue" } ] },
        "Region": { "Ref" : "AWS::Region" }
      }
    },
    "PeerVPC": {
      "Condition": "Peering",
      "Type": "Custom::PeerVPC",
      "Properties": {
        "ServiceToken": { "Fn::If": ["LambdaAvailable",{ "Fn::GetAtt": [ "CustomLogic", "Outputs.LambdaPeeringArn" ] }, { "Ref": "AWS::NoValue" } ] },
        "Environment":  { "Ref": "PeeringEnvironment" },
        "Region": { "Ref" : "AWS::Region" }
      }
    },
    "AttachVpcToHostedZone": {
      "Condition": "LambdaAvailable",
      "Type": "Custom::AttachVpcToHostedZone",
      "Properties": {
        "ServiceToken": { "Fn::If": ["LambdaAvailable",{ "Fn::GetAtt": [ "CustomLogic", "Outputs.LambdaAttachHostedZoneArn" ] }, { "Ref": "AWS::NoValue" } ] },
        "Region": { "Ref": "AWS::Region" },
        "HostedZoneId": { "Ref": "InternalHostedZone" },
        "VpcId": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] }
      }
    },
    "VPC": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/vpc.json" ]] },
        "Parameters": {
          "PeerVPC": { "Fn::If":["Peering",{ "Fn::GetAtt": [ "PeerVPC", "VpcId" ] },{ "Ref": "PeerVPCOverRide" }] },
          "PeerVPCCidr": { "Fn::If":["Peering",{ "Fn::GetAtt": [ "PeerVPC", "VpcCidr" ]}, { "Ref": "PeerVPCCidr" }] },
          "NumberOfAzs": { "Fn::If":["LambdaAvailable",{ "Ref": "NumberAzs" },{ "Ref": "NumberOfAzsOverRide"}]},
          "VPCCIDR": { "Ref": "VPCCIDR" },
          "GlobalCIDR": { "Ref": "GlobalCIDR" },
          "MaskBit": { "Ref": "MaskBit" },
          "ReservedCidrs": { "Ref": "ReservedCidrs" },
          "LambdaVpcCidrArn": { "Fn::If": ["LambdaAvailable",{ "Fn::GetAtt": [ "CustomLogic", "Outputs.LambdaVpcCidrArn" ]},""]},
          "Project": { "Ref": "Project" },
          "Environment": { "Ref": "Environment" },
          "InternalDomain": { "Ref": "PrivateDomain" },
          "PublicPeerRouteTable": { "Fn::If":["Peering", { "Fn::GetAtt": [ "PeerVPC","PublicRouteTable" ] }, { "Ref": "PublicPeerRouteTable" }] },
          "PrivatePeerRouteTableAz1": { "Fn::If":["Peering", { "Fn::GetAtt": [ "PeerVPC","PrivateRouteTableAz1" ] }, { "Ref": "PrivatePeerRouteTableAz1" }] },
          "PrivatePeerRouteTableAz2": { "Fn::If":["Peering", { "Fn::GetAtt": [ "PeerVPC","PrivateRouteTableAz2" ] }, { "Ref": "PrivatePeerRouteTableAz2" }] },
          "PrivatePeerRouteTableAz3": { "Fn::If":["Peering", { "Fn::GetAtt": [ "PeerVPC","PrivateRouteTableAz3" ] }, { "Ref": "PrivatePeerRouteTableAz3" }] },
          "PrivatePeerRouteTableAz4": { "Fn::If":["Peering", { "Fn::GetAtt": [ "PeerVPC","PrivateRouteTableAz4" ] }, { "Ref": "PrivatePeerRouteTableAz4" }] }
        }
      }
    },
    "SecurityGroups": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/security_groups.json" ]] },
        "Parameters": {
          "BastionSSHFrom": { "Ref": "BastionSSHFrom" },
          "VPC": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] },
          "VPCCIDR": { "Fn::GetAtt": [ "VPC", "Outputs.VPCCIDR" ] },
          "VPNCIDR": { "Ref": "VPNCIDR" },
          "Project": { "Ref": "Project" },
          "Environment": { "Ref": "Environment" }
        }
      }
    },
    "Subnets": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/subnets.json" ]] },
        "Parameters": {
          "VPC": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] },
          "VPCCIDR": { "Fn::GetAtt": [ "VPC", "Outputs.VPCCIDR" ] },
          "LambdaSubnetArn": { "Fn::If": [ "LambdaAvailable",{ "Fn::GetAtt": [ "CustomLogic", "Outputs.LambdaSubnetArn" ]},""] },
          "Project": { "Ref": "Project" },
          "Environment": { "Ref": "Environment" },
          "NumberOfAzs": { "Fn::If":["LambdaAvailable",{ "Ref": "NumberAzs" },{ "Ref": "NumberOfAzsOverRide"}]},
          "PublicRouteTable": { "Fn::GetAtt": [ "VPC", "Outputs.PublicRouteTable" ] },
          "PrivateRouteTableAz1": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz1" ] },
          "PrivateRouteTableAz2": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz2" ] },
          "PrivateRouteTableAz3": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz3" ] },
          "PrivateRouteTableAz4": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz4" ] },
          "PublicSubnetAz1Cidr": { "Ref": "PublicSubnetAz1Cidr" },
          "PublicSubnetAz2Cidr": { "Ref": "PublicSubnetAz2Cidr" },
          "PublicSubnetAz3Cidr": { "Ref": "PublicSubnetAz3Cidr" },
          "PublicSubnetAz4Cidr": { "Ref": "PublicSubnetAz4Cidr" },
          "PrivateSubnetAz1Cidr": { "Ref": "PrivateSubnetAz1Cidr" },
          "PrivateSubnetAz2Cidr": { "Ref": "PrivateSubnetAz2Cidr" },
          "PrivateSubnetAz3Cidr": { "Ref": "PrivateSubnetAz3Cidr" },
          "PrivateSubnetAz4Cidr": { "Ref": "PrivateSubnetAz4Cidr" }
        }
      }
    },
    "NetworkACLs": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
      "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/network/vpc/nacls.json" ]] },
        "Parameters": {
          "OpenRuleNumber": { "Fn::If": ["Peering", { "Fn::GetAtt": [ "PeerVPC", "OpenRuleNumber"] }, { "Ref": "OpenRuleNumber" }] },
          "NumberOfAzs": { "Fn::If":["LambdaAvailable",{ "Ref": "NumberAzs" },{ "Ref": "NumberOfAzsOverRide"}]},
          "VPC": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] },
          "PeerVPCCIDR": { "Fn::If":["Peering",{ "Fn::GetAtt": [ "PeerVPC", "VpcCidr" ]}, { "Ref": "PeerVPCCidr" }] },
          "PeerPublicNacl": { "Fn::If":["Peering",{ "Fn::GetAtt": [ "PeerVPC", "PublicNacl" ]}, { "Ref": "PeerPublicNacl" }] },
          "PeerPrivateNacl": { "Fn::If":["Peering",{ "Fn::GetAtt": [ "PeerVPC", "PrivateNacl" ]}, { "Ref": "PeerPrivateNacl" }] },
          "GlobalCIDR": { "Ref": "GlobalCIDR" },
          "VPCCIDR": { "Fn::GetAtt": [ "VPC", "Outputs.VPCCIDR" ] },
          "Environment": { "Ref": "Environment" },
          "PublicSubnetAz1": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz1" ] },
          "PublicSubnetAz2": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz2" ] },
          "PublicSubnetAz3": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz3" ] },
          "PublicSubnetAz4": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz4" ] },
          "PrivateSubnetAz1": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz1" ] },
          "PrivateSubnetAz2": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz2" ] },
          "PrivateSubnetAz3": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz3" ] },
          "PrivateSubnetAz4": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz4" ] }
        }
      }
    },
    "NAT": {
      "Condition": "NATCondition",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" },  "/cloudformation/network/vpc/nat.json" ] ] },
        "Parameters": {
          "VPC": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] },
          "Project": { "Ref": "Project" },
          "Environment": { "Ref": "Environment" },
          "NumberOfAzs": { "Fn::If":["LambdaAvailable",{ "Ref": "NumberAzs" },{ "Ref": "NumberOfAzsOverRide"}]},
          "PrivateRouteTableAz1": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz1" ] },
          "PrivateRouteTableAz2": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz2" ] },
          "PrivateRouteTableAz3": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz3" ] },
          "PrivateRouteTableAz4": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz4" ] },
          "PublicSubnetAz1": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz1" ] },
          "PublicSubnetAz2": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz2" ] },
          "PublicSubnetAz3": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz3" ] },
          "PublicSubnetAz4": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz4" ] }
        }
      }
    },
    "Bastion": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join": [ "", [ "https://s3", { "Fn::If": [ "IsRegionUSStandard", "", { "Fn::Join": [ "", [ "-", { "Ref": "AWS::Region" } ] ] } ] }, ".amazonaws.com/", { "Ref": "CloudToolsBucket" }, "/", { "Ref": "Release" }, "/cloudformation/common/always_on_instance.json" ]] },
        "Parameters": {
          "Project": { "Ref": "Project" },
          "PrivateDomain": { "Ref": "PrivateDomain" },
          "PublicDomain": { "Ref": "PrivateDomain" },
          "Environment": { "Ref": "Environment" },
          "Role": "Bastion",
          "AssociatePublicIPAddress": "True",
          "IAMInstanceProfile": { "Fn::GetAtt": [ "IAM", "Outputs.BastionInstanceProfile" ] },
          "AMI": { "Ref" : "BastionAMI" },
          "OS": "rhel",
          "InstanceType": { "Ref": "BastionInstanceType" },
          "EC2KeyPair": { "Ref" : "EC2KeyPair" },
          "InstanceSubnet": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz1" ] },
          "BootstrapBucket" : { "Fn::Join": [ "/", [ { "Ref": "CloudToolsBucket" }, { "Ref": "Release" }, "bootstrap" ] ] },
          "BootstrapFileName" : { "Ref": "CommonBootstrapFile" },
          "InstanceSecurityGroups" : { "Fn::GetAtt": [ "SecurityGroups", "Outputs.BastionSecurityGroup" ] },
          "CloudWatchAlarmSNSTopic" : { "Fn::GetAtt": [ "SNS", "Outputs.NetworkOperations" ] }
        }
      }
    }
  },
  "Outputs": {
    "VPC": {
      "Description": "ID for Virtual Pricate Cloud",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.VPC" ] }
    },
    "VPCCIDR": {
      "Description": "CIDR for Virtual Pricate Cloud",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.VPCCIDR" ] }
    },
    "NetworkOperationsSNSTopic": {
      "Description": "Network Operations SNS topic",
      "Value": { "Fn::GetAtt": [ "SNS", "Outputs.NetworkOperations" ] }
    },
    "PublicSubnets": {
      "Description": "Comma separated list of Public Subnets",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnets" ] }
    },
    "PrivateSubnets": {
      "Description": "Comma separated list of Private Subnets",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnets" ] }
    },
    "PublicSubnetAz1": {
      "Description": "Subnet Id for Public Az1",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz1" ] }
    },
    "PublicSubnetAz2": {
      "Description": "Subnet Id for Public Az2",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz2" ] }
    },
    "PublicSubnetAz3": {
      "Description": "Subnet Id for Public Az3",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz3" ] }
    },
    "PublicSubnetAz4": {
      "Description": "Subnet Id for Public Az4",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PublicSubnetAz4" ] }
    },
    "PrivateSubnetAz1": {
      "Description": "Subnet Id for Private Az1",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz1" ] }
    },
    "PrivateSubnetAz2": {
      "Description": "Subnet Id for Private Az2",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz2" ] }
    },
    "PrivateSubnetAz3": {
      "Description": "Subnet Id for Private Az3",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz3" ] }
    },
    "PrivateSubnetAz4": {
      "Description": "Subnet Id for Private Az4",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.PrivateSubnetAz4" ] }
    },
    "PublicRouteTable": {
      "Description": "Route Table Id for Public",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.PublicRouteTable" ] }
    },
    "PrivateRouteTableAz1": {
      "Description": "Route Table Id for Private Az1",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz1" ] }
    },
    "PrivateRouteTableAz2": {
      "Description": "Route Table Id for Private Az2",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz2" ] }
    },
    "PrivateRouteTableAz3": {
      "Description": "Route Table Id for Private Az3",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz3" ] }
    },
    "PrivateRouteTableAz4": {
      "Description": "Route Table Id for Private Az4",
      "Value": { "Fn::GetAtt": [ "VPC", "Outputs.PrivateRouteTableAz4" ] }
    },
    "RDSSubnetGroup": {
      "Description": "Subnet Group for RDS",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.RDSSubnetGroup" ] }
    },
    "ElastiCacheSubnetGroup": {
      "Description": "Subnet Group for ElastiCache",
      "Value": { "Fn::GetAtt": [ "Subnets", "Outputs.ElastiCacheSubnetGroup" ] }
    }
  }
}
